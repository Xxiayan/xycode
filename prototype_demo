原型链和继承

首先说明一下继承与原型链的关联：
一般有两种继承方式，为接口继承和实现继承。由于函数没有签名无法实现接口继承，所以javaScript中只
支持实现继承。但是实现继承主要是依靠原型链来实现的，所以要掌握js中的继承必须先理解掌握原型链。


    1、三个概念：
        1.1）构造函数：js中的函数，在被new操作符操作的情况下，都可以被称为构造函数。
            例 function A(){
                this.name='pig';
            }//函数A

              A a = new A(); //A被new出一个对象a
            
            该例子满足构造函数概念的两个条件，即A为构造函数。
            （切记要函数变为构造函数，前提一定要是函数，而且要被new！！！）
            
        1.2）原型对象：object  new出来的一个对象，每个函数都有prototype属性，而这个属性又是一个对象，
                     这个属性指向函数的原型对象。

        1.3）实例：还是上面的例子，A实例化出一个对象a，即a是A的实例。

    2、三者之间的联系：
        2.1）实例对象和原型对象的关系：
            实例对象中含有__proto__属性，该属性指向原型对象。

        2.2）原型对象和构造函数之间的关系：
            构造函数有prototype属性，而这个属性又是一个对象，这个属性指向函数的原型对象。

            原型对象中含有constructor属性（是一个指针），该属性指向了构造函数，即constructor就是指向
            prototype属性所在的函数（构造函数）的指针。

    3、总结：
        3.1）每个函数都有prototype属性,并且由construct指向构造函数。
        3.2）每个对象都有__proto__属性
        3.3)__proto__指向函数的prototype

    4、用原型链实现继承
        思想：利用原型让一个引用类型继承另一个引用类型的属性和方法。


        function A(){
            this.mood="terrible";
        }

        function B(){

        }

        如何让函数B继承函数A原型上的属性和方法?
        4.1）首先创建A的实例对象
             A a=new A();
        4.2)A的实例a里面包含A里面所有的属性，将a给B的原型,就可以通过这个找到A原型上的属性
            B.prototype=a;
        4.3)再创建B的实例b,则b里就会有mood属性
            B b = new B();

        
